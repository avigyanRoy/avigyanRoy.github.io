const express= require("express");

const mongo_connector=require("./mongoConnector.js");
const user_mongo= require("./mongo.js");
const qa_mongo= require("./QAmongo.js");
const cors= require("cors");
const app= express();
app.use(express.json());
app.use(express.urlencoded({extended: true}));

app.use(cors());

mongo_connector();

var username;


app.post("/login",async(req,res)=>{
    const {email,password}= req.body;
    const data ={
        email:email,
        password:password
    }
    
    try{
        const check = await user_mongo.findOne({email:email});
        console.log(check);
        const checkpass= await user_mongo.findOne({password:password, email:email})
        if(check){
            if(checkpass){
                username= check.name;
                res.json("exists");
            }
            else{
                res.json("Incorrect password");
            }
            
            
        }
        else{
            res.json("doesn't exist"); 
            
        }
    }
    catch(e){
        console.log(e);
    }
});
app.post("/signup",async(req,res)=>{
    const {name,email,password}= req.body;
    const data ={
        name:name,
        email:email,
        password:password
    }

    
    try{
        const check = await user_mongo.findOne({email:email});
        if(check){
            username= check.name;
            res.json("exists");
        }
        else{
            
            res.json("doesn't exist");
            await user_mongo.insertMany([data]);
        }
    }
    catch(e){
        console.log(e);
    }
});
app.get("/home", async(req,res)=>{
    try{
        const questions= await qa_mongo.find().lean();
        const q= questions.map(({ _id,__v, ...rest }) => rest);
        res.json(q);
        

    }
    catch (error) {
        console.log("Error while fetching data: ", error);
        res.status(500).json({ error: "Internal server error" });
      }
});



app.get("/qapage", async (req, res) => {
    try {
      const q_title = req.query.q_title; // Use req.query.q_title to get the value of q_title from query parameters
      const req_q = await qa_mongo.findOne({ title: q_title });
      console.log(req_q);
      res.json(req_q);
    } catch (e) {
      console.log(e);
      res.status(500).json({ error: "Internal server error" });
    }
  });

  app.post("/askaquestion", async (req, res) => {
    const { title, answer } = req.body;
  
    try {
      const existingQuestion = await qa_mongo.findOne({ title: title });
  
      if (!existingQuestion) {
        res.status(404).json({ error: "Question not found" });
        return;
      }
  
      existingQuestion.answers.push(answer);
      
      existingQuestion.no_of_answers = existingQuestion.answers.length;
  
      await existingQuestion.save();
      res.json("success");
    } catch (error) {
      console.log("Error while fetching data: ", error);
      res.status(500).json({ error: "Internal server error" });
    }
  });

app.get("/askaquestion", async(req,res)=>{
    try{
        res.send(username);
    }
    catch(e){
        console.log(e);
    }
});

app.post("/postquestion", async(req,res)=>{
    

    const {title, user, up_votes, down_votes, no_of_answers, qBody, answers, answer_up_votes, answer_down_votes}=req.body;
    const data={
        title:title,
        author_name: username,
        up_votes: up_votes,
        down_votes:down_votes,
        no_of_answers:no_of_answers,
        description: qBody,
        answers: answers,
        answer_up_votes: answer_up_votes,
        answer_down_votes: answer_down_votes
    }
    try{
        
        
        await qa_mongo.insertMany(data);
        
    }
    catch (error) {
        console.log("Error while fetching data: ", error);
        res.status(500).json({ error: "Internal server error" });
      }
});





  

let port = process.env.PORT;
if (port == null || port == "") {
  port = 3001;
}


app.listen(port, ()=>{
    console.log("Port connected");
})